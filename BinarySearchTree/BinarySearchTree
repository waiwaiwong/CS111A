package bst;

public class BinarySearchTree<T extends KeyedItem<KT>, KT extends Comparable<? super KT>> extends BinaryTreeBasis<T> {
	public BinarySearchTree() {

	}

	public BinarySearchTree(T rootItem) {
		super(rootItem);
	}

	public void setRootItem(T newItem) throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}

	public void insert(T newItem) {
		root = insertItem(root, newItem);
	}

	public T retrieve(KT searchKey) {
		return retrieveItem(root, searchKey);
	}

	public void delete(KT searchKey) throws TreeException {
		root = deleteItem(root, searchKey);
	}

	public void delete(T item) throws TreeException {
		root = deleteItem(root, item.getKey());
	}

	protected TreeNode<T> deleteItem(TreeNode<T> tNode, KT searchKey) {
		TreeNode<T> newSubTee;
		if (tNode == null) {
			throw new TreeException("TreeException: item not found");

		} else {
			T nodeItem = tNode.item;
			if (searchKey.compareTo(nodeItem.getKey()) == 0) {
				tNode = deleteNode(tNode);
			} else if (searchKey.compareTo(nodeItem.getKey()) < 0) {
				newSubTee = deleteItem(tNode.leftChild, searchKey);
				tNode.leftChild = newSubTee;
			} else {
				newSubTee = deleteItem(tNode.rightChild, searchKey);
				tNode.rightChild = newSubTee;
			}
		}
		// return treeItem;
		return tNode;
	}

	private TreeNode<T> deleteNode(TreeNode<T> tNode) {
		T replacementItem;
		if (tNode.leftChild == null && tNode.rightChild == null)
			return null;
		else if (tNode.leftChild == null)
			return tNode.rightChild;
		else if (tNode.rightChild == null)
			return tNode.leftChild;

		else {
			replacementItem = findLeftMost(tNode.rightChild);
			tNode.item = replacementItem;
			tNode.rightChild = deleteLeftMost(tNode.rightChild);
			return tNode;
		}
	}

	protected TreeNode<T> deleteLeftMost(TreeNode<T> tNode) {
		if(tNode.leftChild==null) {
			return tNode.rightChild;
		}
		else {
			tNode.leftChild = deleteLeftMost(tNode.leftChild);
			return tNode;
		}
		
	}

	protected T findLeftMost(TreeNode<T> tNode) {
		if (tNode.leftChild == null)
			return tNode.item;
		else
			return findLeftMost(tNode.leftChild);

	}

	protected T retrieveItem(TreeNode<T> tNode, KT searchKey) {
		T treeItem;
		if (tNode == null) {
			treeItem = null;
		} else {
			T nodeItem = tNode.item;
			if (searchKey.compareTo(nodeItem.getKey()) == 0) {
				treeItem = tNode.item;
			} else if (searchKey.compareTo(nodeItem.getKey()) < 0) {
				treeItem = retrieveItem(tNode.leftChild, searchKey);
			} else {
				treeItem = retrieveItem(tNode.rightChild, searchKey);
			}
		}
		return treeItem;
	}

	protected TreeNode<T> insertItem(TreeNode<T> tNode, T newItem) {
		TreeNode<T> newSubTee;
		if (tNode == null) {
			tNode = new TreeNode<T>(newItem, null, null);
			return tNode;
		}
		T nodeItem = tNode.item;
		if (newItem.getKey().compareTo(nodeItem.getKey()) < 0) {
			newSubTee = insertItem(tNode.leftChild, newItem);
			tNode.leftChild = newSubTee;
			return tNode;
		} else {
			newSubTee = insertItem(tNode.rightChild, newItem);
			tNode.rightChild = newSubTee;
			return tNode;
		}
	}

}
